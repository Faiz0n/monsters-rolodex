{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","fiteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAGaA,EAAO,SAAAC,GAAK,OACnB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YACjF,6BAAKL,EAAMG,QAAQG,OAC1B,4BAAIN,EAAMG,QAAQI,YCJLC,G,MAAW,SAAAR,GAAK,OAE3B,aADF,CACE,OAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHVO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBACAZ,UAAW,SACXa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCCG,G,wDApCf,aAAc,IAAD,8BACb,gBAaAH,aAAe,SAAAI,GAAC,OAAE,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZvD,EAAKC,MAAQ,CACXb,SAAS,GACTU,YAAY,IAJD,E,qDAQb,WAAoB,IAAD,OACnBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACT,SAASkB,S,oBAKpC,WAAS,IAAD,EAC2BC,KAAKN,MAA9Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YACXU,EAAkBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC7CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACA,sBAAK9B,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CACCW,YAAY,iBACZC,aAAgBe,KAAKf,eAEtB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA7BVI,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d20b0384.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = props =>(\r\n      <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n       <h2>{props.monster.name}</h2>\r\n<p>{props.monster.email}</p>\r\n</div>\r\n)","import React from 'react'\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\nexport const CardList = props  =>(\r\n//    return <div className= 'card-list'>{props.children}</div>\r\n  <div className='card-list'>\r\n   {props.monsters.map(monster=>(\r\n    <Card key={monster.id} monster={monster}/>\r\n))}\r\n</div>\r\n)","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) =>(\r\n    <input \r\n    className =\"search\"\r\n    type=\"search\" \r\n    placeholder={placeholder} \r\n    onChange={handleChange}\r\n    />\r\n)","import React, {Component} from 'react'\nimport { CardList } from './component/card-list/card-list.component';\n\nimport { SearchBox } from './component/search-box/search-box.component';\n\nimport './App.css';\n\n\nclass App extends Component{\nconstructor(){\nsuper()\nthis.state = {\n  monsters:[],\n  searchField:''\n}\n\n}\ncomponentDidMount(){\nfetch('https://jsonplaceholder.typicode.com/users')\n.then(res => res.json())\n.then(users=>this.setState({monsters:users}))\n}\n\nhandleChange = e=>this.setState({searchField: e.target.value})\n\n render(){\n    const {monsters, searchField} = this.state;\n    const fiteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    return (\n    <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n         placeholder=\"search monster\"\n         handleChange = {this.handleChange}\n        />\n        <CardList monsters={fiteredMonsters}/>\n    </div>\n  );\n}\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}